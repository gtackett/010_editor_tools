//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: LIB51.bt
//   Authors: Galen Tackett
//   Version: 4.0
//   Purpose: Display each record in an OMF51 library file, with partial support for Keil-specific records
//   Category: Archive
//   File Mask: *.lib
//   ID Bytes: 2C 07 00 [+6] 02 
//   History:   v4.0    2022 09 03  Much simplified, easier to follow the code vs. documentation.
//              v3.0    2022 07 24  Several Keil record types now working
//------------------------------------------------

//
// Based upon listings produced by the "Total Commander" OBJVIEW Lister plugin displays.
//
#include <General Purpose/myTypes.1sc>

#include <omf51_types.1sc>
#include <OMF51/LibTypes.1sc>
#include </Users/gtackett/Documents/SweetScape/010 Scripts/UtilityFunctions.1sc> 

const unsigned int INSANERECORDCOUNT <hidden=true> = 5000;        // not used. Consider sanity check on record count??

local const string libFileName <hidden=true> = FileNameGetBase(GetFileName());

LittleEndian();


Assert ( FileSize() != 0, "\"" + libFileName + "\"is empty.\n");

local uint64 recordByteOffset <hidden=true>, checksumCount <hidden=true>;

local const int  MAXNAMELENGTH = 30;

#ifndef NO_KEIL
local byte keilFlag;
//local const string KeilString = " (Keil)";
#endif // NO_KEIL


local uint32 recordNumber <name="Current record number", format=decimal>;
typedef struct {
    local byte checksumValid <hidden=true> = false;
    recordByteOffset = FTell();
    BitfieldDisablePadding();
    td_recType     recordType <open=suppress>;
    td_recLength   recordLength
                        < 
                          open=suppress,
                          fgcolor=(this != 7 ? cRed : cNone),
                          comment=(this == 7 ? "(value matches expected)" : "(value should be 7)")
                        >;
    checksumCount = recordLength + 3;
    udshort         moduleCount /* <name="uint16"> */;
    struct  {
        LIBBLKNUM       moduleNamesStartBlock <name="Block in file", comment=(this <= 9 ? "" : Str("%d decimal", this) )>;
        LIBBYTENUM      moduleNamesByteInBlock  <name="Byte in block", comment=(this <= 9 ? "" : Str("%d decimal", this) )>;
    } ModuleLoc <name="Module names start",open=true>;
    BitfieldEnablePadding();
    td_ChkSum    checksum;
} LibHeader <
    format=hex
  >;

uint64 checksumColor(byte n)
{
    return n ? cGreen : cRed;
}

typedef td_countedStr NAMEDATA <open=suppress>;


local const int64
    MHRMINSIZE <name="Module header record minimum size (bytes)">
               =    sizeof(td_recType)  + sizeof(td_recLength)  + sizeof(udbyte)   + 
                    sizeof(td_TRNID)    + sizeof(byte)          + sizeof(td_ChkSum)
         ;
local const int64
    MERMINSIZE <name="Module end record minimum size (bytes)">
               =    sizeof(td_recType)  + sizeof(td_recLength)  + sizeof(udbyte)   + 
                    2*sizeof(byte)      + sizeof(ubyte)         + sizeof(byte)     + sizeof(td_ChkSum);

typedef struct {
    td_recType      recordType;
    td_recLength    recordLength;
    recordNumber++;
    local string nameString <hidden=true> = getDefRecordTypeName(recordType);
    if (recordLength > 0)
        uhbyte          genericRecordData[recordLength - 1];
    td_ChkSum    checksum;
} td_genericRecord<name=("Unimplemented " + nameString + " processed as generic record")>;

typedef td_genericRecord fixupRecord;

typedef td_genericRecord ModuleNames;

typedef td_genericRecord Dictionary;

typedef td_genericRecord ModuleLocations;

typedef struct {
        td_recType      recordType;
        td_recLength    recordLength;

        local int segmentCount <hidden=true> ;
        local byte checksumValid <hidden=true> = false;
        local int32     remainingLength = recordLength;
        local string    lclSegName;
        local td_segID  lclSegID;

        do {
            ++segmentCount;
            struct {
                BitfieldDisablePadding();
                td_segID segID;
                lclSegID = segID;
                td_segInfo segInfo_Q;
                td_segType segType_Q;
                local string lclSegName;
                if (this.segType_Q != SegType_BIT)
                    uhbyte :8;
                else
                    uhbyte bitInfo_Q;
                BitfieldEnablePadding();
                BigEndian();
                ushort segAddress <format=hex>;
                ushort segLength  <format=hex, comment=((this > 9 ? Str("%d decimal", this) : "" ))>;
                LittleEndian();
                uhbyte :8;
                td_countedStr segName;
                lclSegName = segID == 0 ? "ABS" : (sizeof(segName) > 1) ? segName.str.strText : "(null name)";
            } seg <
                name=(
                    Str("Keil segment 0x%02X:%s",
                        this.segID,
                        this.lclSegName != "" ? " " + this.lclSegName : "")
                 )
            >;
            remainingLength -= sizeof(seg);
        } while (remainingLength >= 9);

        Assert(--remainingLength == 0, Str("%d left-over bytes after last segment, at record %d", remainingLength, recordNumber) );
        td_ChkSum    checksum;
} SegmentDefsKeil;

typedef td_genericRecord SegmentDefsIntel;
typedef td_genericRecord PublicDefsKeil;

typedef td_genericRecord PublicDefsIntel;


typedef struct {
        local byte checksumValid <hidden=true> = false;
        td_recType recordType;
        td_recLength recordLength;
        Assert(recordLength != 0);
        local int32 remainingLength <hidden=true> = recordLength;
        local string lclExternName< hidden=true> ;
        do {
            struct {
                BitfieldDisablePadding();
                uhbyte ID_BLK;
                if (ID_BLK != 2)
                    Warning("At record %d, file offset %04x, external definition ID_BLK is %u instead of 2", recordNumber, FTell(), ID_BLK);
                uhbyte EXT_ID;
                uhbyte SYM_INFO;
                uhbyte :8;
                local string lclExternName;
                BitfieldEnablePadding();
                BigEndian();
                uhbyte :8;
                td_countedStr extName;
                lclExternName = Strlen(extName.str.strText) != 0 ? extName.str.strText : "<<?>>";
                LittleEndian();
            } ext <
                name=(
                    (parentof(this).lclExternName != "") ?  parentof(this).lclExternName : "<?>")
               >;
            lclExternName = ext.lclExternName;
            remainingLength -= sizeof(ext);
        } while (remainingLength >= 9);
        Assert(--remainingLength == 0, Str("%d left-over bytes after last segment, at record %d", remainingLength, recordNumber) );
        td_ChkSum    checksum;
} ExternalDefsKeil;

typedef struct {
        local byte checksumValid = false;
        local int i;
        td_recType recordType;
        td_recLength recordLength;
        Assert(recordLength != 0);
        local int32 remainingLength = recordLength;
        local string lclExternName;
        do {
            struct {
                BitfieldDisablePadding();
                uhbyte ID_BLK;
                if (ID_BLK != 2)
                    Warning("At record %d, file offset %04x, external definition ID_BLK is %u instead of 2", recordNumber, FTell(), ID_BLK);
                uhbyte EXT_ID;
                uhbyte SYM_INFO;
                uhbyte :8;
                local string lclExternName;
                BitfieldEnablePadding();
                BigEndian();
                uhbyte :8;
                td_countedStr extName;
                lclExternName = Strlen(extName.str.strText) != 0 ? extName.str.strText : "<<?>>";
                LittleEndian();
            } ext <
                name=(
                    (parentof(this).lclExternName != "") ?  parentof(this).lclExternName : "<?>")
               >;
            lclExternName = ext.lclExternName;
            remainingLength -= sizeof(ext);
        } while (remainingLength >= 9);
        Assert(--remainingLength == 0, Str("%d left-over bytes after last segment, at record %d", remainingLength, recordNumber) );
        td_ChkSum    checksum;
} ExternalDefsIntel;

typedef struct {
    if (parentof(this).isKeilFlavor)
        SegmentDefsKeil SegmentDefinitions;
    else
        SegmentDefsIntel SegmentDefinitions;
} SegmentDefs;

typedef struct {
    if (parentof(this).isKeilFlavor)
        ExternalDefsKeil ExternalDefinitions;
    else
        ExternalDefsIntel ExternalDefinitions;
} ExternalDefs;

typedef struct {
    if (parentof(this).isKeilFlavor)
        PublicDefsKeil PublicDefinitions;
    else
        PublicDefsIntel PublicDefinitions;
} PublicDefs;

typedef struct
{
    local byte checksumValid <hidden=true> = false;
    td_recType recordType;
    td_recLength recordLength;
    
    BitfieldDisablePadding();

    if (recordLength < MHRMINSIZE)
    {
        Warning("Library corrupt? Module header record length %d is shorter than minimum (%u).\n", recordLength, MHRMINSIZE);
        FSkip(recordLength);
    }
    else
    {           
        NAMEDATA    nameData;
        td_TRNID    trnId;
        uint :8;
    }
    BitfieldEnablePadding();
    td_ChkSum    checksum;

} ModuleHeader <name=("Start Module \"" + this.nameData.str.str +"\"")>;

typedef struct {
    local byte checksumValid <hidden=true> = false;
    td_recType recordType;
    ushort recordLength;
    
    BitfieldDisablePadding();
    if (recordLength < MERMINSIZE)
    {
        Warning("Library corrupt? Module end record length %d is shorter than minimum (%d).\n", recordLength, MERMINSIZE);
        FSkip(recordLength);
    }
    else
    {           
        NAMEDATA    nameData;
        uint        pad     :16;     // two unused bytes follow the module name
        uhbyte      regMsk;
        uint        pad2    :8;
    }
        
    BitfieldEnablePadding();
    td_ChkSum   checksum;
 } ModuleEnd <name=("End Module \"" + this.nameData.str.str +"\"")>;

local int keilScopeDefWarned;

typedef struct {
#ifndef NO_KEIL
   td_recType          recordType;
   td_recLength        recordLength;
   if (recordType & 0x1)
        if (!keilScopeDefWarned)
            warningWithLimitedDelay(
                Str(
                  "At record %d: Keil scope definition format is unknown; using Intel generic format",
                  recordNumber
                ),
                5
               );
            keilScopeDefWarned = true;
#endif
    td_scopeBlockType   blockType;
    td_countedStr       blockName;
    td_ChkSum           checksum;
} ScopeDef;

typedef struct {
    td_segId        segmentId;
    td_offset       offset;
    byte            :8;
    td_countedStr   name;
} SymbolInfo;


typedef struct {
    // No Keil variant is known
    recordNumber++;
    td_recType          recordType;
    td_recLength        recordLength;
    td_defType          defType;
    switch(defType)
    {
        case defType_localSymbols:
        case defType_publicSymbols:
            SymbolInfo symInfo;
            break;

        default:
    }
} DebugItems;

string getDefRecordTypeName(td_recType t)
{
    return EnumToString(t);
}

#ifdef UNUSED_FUNCTION_MARKER
td_recType isModuleHeader(const td_recType rt)
{
    return rt == rt_Module_HDR || rt_Module_HDR_Keil ? rt : 0;
}
#endif // UNUSED_FUNCTION_MARKER

td_recType isDefinitionsRecord(const td_recType rt)
{
    const local td_recType baseRt = rt & 0xfe;
    return (baseRt == rt_Segment_DEF || baseRt == rt_Public_DEF || baseRt == rt_External_DEF) ? rt : 0;
}

td_recType isFixupRecord(const td_recType rt)
{
   const local td_recType baseRt = rt & 0xfe;
   return (baseRt == rt_Fixup) ? rt : 0;
}

typedef struct {
    td_recType      recordType;
    td_recLength    recordLength;
    local td_recLength remaining <hidden=true> = recordLength - 1;
    struct {
        td_segId    segID;
        td_offset   offset;
    } contentData;
    remaining -= sizeof(contentData);
    if (remaining > 0)
        uhbyte otherDat[remaining];
    td_ChkSum    checksum;
} Content;

td_recType nextRecType(void)
{
    return ReadUByte();
}

byte isDataSectionOrDebugRecord(td_recType rt)
{
    local td_recType baseType <hidden=true> = rt & 0xfe;
    return (
        (baseType == rt_Segment_DEF || baseType == rt_Public_DEF || baseType == rt_External_DEF) // Definitions Record Types
     || (baseType == rt_Scope_DEF)
     || (baseType == rt_Debug_Item)
     || (baseType == rt_Content)
    ) ? rt : 0;
}
 
struct {
    local int64 libSize <hidden=true> = FileSize();
    LibHeader header;
    local td_recType thisRecType <hidden=true>;
    while (true)
    {
        thisRecType = nextRecType() ;
        if (thisRecType == rt_LIB_ModNames)
            break;
        switch(thisRecType)
        {
            case rt_Module_HDR:
                ModuleHeader startModule;
                break;
            case rt_Module_END:
                ModuleEnd endModule;
                break;
            case rt_Unknown0x23:
            case rt_Unknown0x72:
                td_genericRecord unknownKeil;
                break;
            default: 
                if (getDefRecordTypename() == "")
                {
                    Printf("Unknown record type %02X. Attempting to treat as generic record\n", thisRecordType);
                    td_genericRecord unknownRecord;
                }
                break;
        }
        while ( (thisRecType = isDefinitionsRecord( nextRecType() ) ) )
        {
            struct {
                local byte isKeilFlavor = thisRecType & 0x1;
                switch(thisRecType)
                {
    
                    case rt_Segment_DEF:
                    case rt_Segment_DEF_Keil:
                        SegmentDefs segment;
                        break;
    
                    case rt_Public_DEF:
                    case rt_Public_DEF_Keil:
                        PublicDefs publicSymbol;
                        break;
    
                    case rt_External_DEF:
                    case rt_External_DEF_Keil:
                        ExternalDefs externalSymbol;
                        break;
    
                    default:
                        Error("Not a definitions record: %u %s", thisRecType, getDefRecordTypeName(thisRecType) );
                        break;
                }
            } def;
        }
        while ( (thisRecType = isDataSectionOrDebugRecord( nextRecType() ) ) )
        {
            switch(thisRecType) {
                case rt_Content:
                case rt_Content_Keil:
                    Content content;
                    while ( (thisRecType = isFixupRecord( nextRecType() ) ) )
                    {
                        fixupRecord fixups;
                    }
                    break;

                case rt_Scope_DEF:
                    ScopeDef scope;
                    break;

                case rt_Debug_Item:
                    DebugItems debugSyms;
                    break;

                default:
                    Error("Not a content, scope, or debug items record: %u %s", thisRecType, getDefRecordTypeName(thisRecType) );
                    break;
            }
        }
        if (nextRecType() == rt_LIB_ModNames)
        {
            ModuleNames moduleNames;
            ModuleLocations moduleLocations;
            Dictionary dictionary;
            break;
        }
    }
}
library 
    <
        name=( Str("OMF51 library: \"%s\", %d bytes, %d modules", libFileName, libSize, this.header.moduleCount) )
    >;