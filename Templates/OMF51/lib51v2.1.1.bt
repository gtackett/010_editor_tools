//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File:   lib51.bt
//   Authors:   Galen Tackett
//   Version:   2.1.1
//   Purpose:   Explore OMF51 library file format
//  Category:   Object File
// File Mask:   *.lib
//  ID Bytes:   2C 07
//   History:   V2.1.1   glt    Added check for Keil-specific record variants,
//                              with messages when such occur.
//              V2.1
//              V2.0     glt     Re-created some earlier V2 fixes that were subsequently
//                              "bugged" by hasty "improvements", and tidying up a bit.
//
//              V2       glt     A damaged, "bugged" and nonworking version (see above)
//------------------------------------------------
#include <OMF51.h>
#define USE_READLIBRARY
local int test;
local string KeilString = " (Keil)";
string recordTypeName(RECORDTYPE rt)
{
    local string baseTypeString;
    local RECORDTYPE baseRecordType = thisRecordType & 0xfe; 
    switch( baseRecordType ) {
            case rt_Content:
                baseTypeString = "rt_Content";
                break;
    
            case rt_Fixup:
                baseTypeString = "rt_Fixup";
                break;
    
            case rt_Scope_DEF:
                baseTypeString = "rt_Scope_DEF";
                break;
    
            case rt_Public_DEF:
                baseTypeString = "rt_Public_DEF";
                break;
    
            case rt_External_DEF:
                baseTypeString = "rt_External_DEF";
                break;
    
            case rt_LIB_ModLocs:
                baseTypeString = "rt_LIB_ModLocs";
                break;
    
            case rt_LIB_ModName:
                baseTypeString = "rt_LIB_ModName";
                break;
            case rt_LIB_DICTNRY:
                baseTypeString = "rt_LIB_DICTNRY";
                break;
            default:
                Printf("Unexpected \"not implemented\" record type 0x%02X at %u.", thisRecordType, recordNumber);
    }
    return Str("%s%s", baseTypeString, ((baseRecordType == thisRecordType)) ? "" : KeilString);
}

typedef ubyte UHBYTE <format=hex>;

local RECORDTYPE    thisRecordType = 0;
local UHBYTE        thisChecksumResult;

local ushort    thisRecordLength;
local byte      abortFlag               = false;
local UHBYTE    checksumResult;
local uint       recordNumber, moduleCount, lclStartBlock, lclStartByteNumber;
local string    optionalRecordDesc = "";
local string    mismatchString; 

typedef ushort LIBBLKNUM <format=hex>;
typedef ushort LIBBYTENUM <format=hex>;


typedef struct {
    string  mdName;
    ubyte   mdIsOpen;
    LIBBLKNUM mdStartBlock;
    LIBBYTENUM  mdStartByte;
} LCLMODULE;

local LCLMODULE lclModuleTable[10000], nullModule;

local uint      moduleDepth = 0;
local string    modules;
local int32     moduleTableIndex = -1;
local uint      lclIndex;
local ushort    lclLibModuleCount;

#ifndef NO_KEIL
local uint keilFlag;
local RECORDTYPE baseRecordType;
#endif

typedef struct {
    //Printf("Record %u, Struct LIBHEADERdata: %u\n", recordNumber, test++);
    BitfieldDisablePadding();
    ushort moduleCount;
    LIBBLKNUM startBlock;
    LIBBYTENUM LIBBYTENUM;
    BitfieldEnablePadding();
    lclLibModuleCount = moduleCount;
} LIBHEADERdata <read=ReadLIBHEADERdata>;

string ReadLIBHEADERdata( LIBHEADERdata &x)
{
    //Printf("***\nRecord %u, %u modules, Function ReadLIBHEADERdata: %u\n***\n", recordNumber, x.moduleCount, test++);
    //BitfieldDisablePadding();
    //ushort moduleCount;
    //ushort startBlock <format=hex>;
    //ushort LIBBYTENUM <format=hex>;
    //BitfieldEnablePadding();
    return Str("Start of library, %u modules beginning at block %04x, byte %04x", x.moduleCount, x.startBlock, x.LIBBYTENUM);
}

void checkNameLength(ubyte n)
{
    if (n == 0)
    {
        Printf("Zero length module name in module header at record %u (file offset 0x%x)\n", recordNumber, startof(this));
    }
    if (nameLength > maxExpectedNameLength) {
            Printf("Name length (%u) exceeds maximum expected (%u)\m", nameLength, maxExpectedNameLength);
    }
}

typedef struct {
    //Printf("Record %u, Struct MODULEHEADERdata: %u\n", recordNumber, test++);
    BitfieldDisablePadding();
    ubyte   nameLength;
    checkNameLength(nameLength);
    char name[nameLength];
    //else {
    //    Printf("Zero length module name in module header at record %u (file offset 0x%x)\n", recordNumber, startof(this));
    //}
    TRNID   trnId;
    UHBYTE    pad :8;
    lclModuleTable[++moduleTableIndex].mdName = name;
    lclModuleTable[moduleTableIndex].mdIsOpen = true;
    BitfieldEnablePadding();
} MODULEHEADERdata <read=ReadMODULEHEADERdata>;

string ReadMODULEHEADERdata( MODULEHEADERdata &x )
{
    //Printf("Record %u, Function ReadMODULEHEADERdata: %u\n", recordNumber, test++);
    return Str("Start of module \"%s\", TRN_ID 0x%2X", x.name, x.trnId);
    moduleName = x.name;
}

typedef struct {
    UHBYTE  data[parentof(this).recLength - 1];
} SEGMENTDEFdata <read=ReadSEGMENTDEFdata>;

string ReadSEGMENTDEFdata( SEGMENTDEFdata &x)
{
    return Str("Segment records are not parsed yet. Record length %u bytes", thisRecordLength);
}

typedef struct {
    BitfieldDisablePadding();
    ubyte   nameLength;
    if (nameLength == 0)
    {
        Printf("Module %u, file offset %u, has zero-length name\n");
    }
    char name[nameLength];
        
    uint    pad:16;
    UHBYTE  regMsk;
    uint  pad2  :8;
    lclModuleTable[moduleTableIndex].mdIsOpen = false;
    BitfieldEnablePadding();
} MODULEENDdata <read=ReadMODULEENDdata>;

string ReadMODULEENDdata( MODULEENDdata &x )
{
    mismatchString = 0 != Strcmp(x.name, lclModuleTable[moduleTableIndex].mdName )
                        ? "" 
                        : Str( " (%s != %s) ", x.name, lclModuleTable[moduleTableIndex].mdName);
    if (mismatchString != "") Printf(mismatchString + "\n");
    if (x.nameLength > 0)
        return Str("End of module \"%s\"%s, Region mask 0x%02X", x.name, mismatchString, 0 /* x.regMsk*/);
    else
        return Str("MODULEEND record has zero-length name at %X", FTell());
}

typedef struct {
    ubyte   defType;
    UHBYTE  data[parentof(this).recLength - sizeof(defType) - 1];
} DEBUGITEMSdata <read=ReadDEBUGITEMSdata>;

string ReadDEBUGITEMSdata( DEBUGITEMSdata &x)
{
    return Str("Debug items, length %u bytes, Def type 0x%02X",  thisRecordLength, x.defType);
}

typedef struct {
    UHBYTE  data[recLength - 1];
} NOTIMPLEMENTEDdata <read=ReadNOTIMPLEMENTEDdata>;

string ReadNOTIMPLEMENTEDdata( NOTIMPLEMENTEDdata &x)
{
    //optionalRecordDesc = Str("Unimplemented record type 0x%02X, length %u bytes", thisRecordType, thisRecordLength);
    //Printf(optionalRecordDesc+"\n");
    //Assert(1==0, optionalRecordDesc);
    local string typeName;
#ifndef NO_KEIL
    return Str("Unimplemented %srecord type 0x%02X (\"%s\"), length %u bytes",
                keilFlag ? "Keil " : "",
                thisRecordType,
                recordTypeName(baseRecordType), thisRecordLength);
#else
    return Str("Unimplemented record type 0x%02X (\"%s\"), length %u bytes", thisRecordType, recordTypeName(thisRecordType), thisRecordLength);
#endif
}
  
typedef struct {
    StatusMessage("");
    if (recLength > 1)
        UHBYTE  data[recLength - 1];
} UNDOCRECORDdata <read=ReadUNDOCRECORDdata>;

string ReadUNDOCRECORDdata( UNDOCRECORDdata &x)
{
    //optionalRecordDesc = Str("Undocumented record type 0x%02X, length %u bytes", pthisRecordType, thisRecordLength);
    //Printf(optionalRecordDesc+"\n");
   // Assert(1==0, optionalRecordDesc);
    return Str("Undocumented record type %02X, %u bytes", thisRecordType, thisRecordLength); // Str("Undocumented record type 0x%02X, length %u bytes",thisRecordType, thisRecordLength);
}

//
// 
void warningWithLimitedDelay(float seconds, string s)
{
    Warning(s);
    if (seconds > 0)
        Sleep( (int) (Max(seconds,5) * 100) );
}

typedef struct LIBRARY {
    local uint lclLibModuleCount;
    for (recordNumber = 1; !FEof() && !abortFlag; recordNumber++) {
        RECORDTYPE  recType <format=hex>;
        thisRecordType  = baseRecordType = recType;
        keilFlag        = recType & 1;
        baseRecordType &= 0xfe;
        ushort      recLength;
        Assert( recLength > 0, Str("Zero-length record type 0x%02X at file offset %u (0x%X)", recType, FTell(), FTell() ) );
        thisRecordLength = recLength;
        // struct recordData {
            switch(thisRecordType & 0xfe) {
                case rt_LIB_Header:
                    Assert(startof(recType) == 0, Str("Record %u, library header at offset 0x%04X instead of 0", recordNumber, startof(recType)) );
                    LIBHEADERdata x;
                    lclStartBlock = x.startBlock;
                    lclStartByteNumber = x.LIBBYTENUM;
                    break;
        
                case rt_Module_HDR:
                    //++lclLibModuleCount;;
                    if (++moduleDepth > 1)
                        warningWithDelay(
                            Str(15, "Nested modules are not supported, at record %u. Continuing anyway",
                            recordNumber) );
                    MODULEHEADERdata x;
                    moduleDepth--;
                    break;
        
                case rt_Module_END:
                    MODULEENDdata x;
                    break;
    
                case rt_Segment_DEF:
                    Printf("Segment Definitions are only partially implemented, at record %u\n", recordNumber);
                    SEGMENTDEFdata x;
                    break;
     
                case rt_Debug_Item:
                    Printf("Debug Items are only partially implemented, at record %u\n", recordNumber);
                    DEBUGITEMSdata x;
                    break;
    
                case rt_Content:
                case rt_Fixup:
                case rt_Scope_DEF:
                case rt_Public_DEF:
                case rt_External_DEF:
                case rt_LIB_ModLocs:
                case rt_LIB_ModName:
                case rt_LIB_DICTNRY:
#ifndef NO_KEIL
                case rt_Content_Keil:
                case rt_Fixup_Keil:
                case rt_Segment_DEF:
                case rt_Segment_DEF_Keil:
                case rt_Public_DEF_keil:
                case rt_External_DEF_keil:

                if (!keilFlag) {
#endif

                    Printf("Not yet implemented record type 0x%02x (\"%s\"), at record %u\n", thisRecordType, recordTypeName(thisRecordType), recordNumber);
#ifndef NO_KEIL
                } else {
                    Printf("Undocumented, not yet implemented Keil type 0x%02x (\"%s\"), at record %u\n", thisRecordType, recordTypeName(thisRecordType), recordNumber);
                }
#endif
                    NOTIMPLEMENTEDdata x;
                    break;
        
                default:
                    UNDOCRECORDdata x;
                    Printf("Undocumented record type 0x%02x, at record %u\n", thisRecordType, recordNumber);
                    //abortFlag = true;
                    break;       
            } // end switch
#ifdef PRE_PAD_ADJUST // This appears to be an unnecessary precaution
#define ADJUST 1
            if ( sizeof(x) < (recLength-ADJUST) )
            {
    
                Printf("Extra %u bytes of data at end of record\n", (recLength - ADJUST) - sizeof(x));
                UHBYTE extraData[(recLength -ADJUST) - sizeof(x)];
            }
#endif
            //local uint64 checksumStartAt = startof(recType);
            UHBYTE  recordCheckSum;
            checksumResult = Checksum(CHECKSUM_BYTE, startof(recType), recLength + sizeof(recLength) + sizeof(recType));
            Assert(checksumResult == 0, Str("Invalid checksum %02x in record %u, from file offset 0x%02X, %u (%02X) bytes", checksumResult, recordNumber, startof(recType), recLength, recLength));
            if ( optionalRecordDesc != "" )
            {
                Printf(optionalRecordDesc + "\n");
                optionalRecordDesc = "";
            }
        // } // end struct
    } // end for
    for (lclIndex = 0; lclIndex < lclLibModuleCount; lclIndex++)
        Printf("Module %u, name %s\n", lclIndex, lclModuleTable[lclIndex].mdName);
} _LIBRARY 
#ifdef USE_READLIBRARY
<read=readLIBRARY>
#endif
;

#ifdef USE_READLIBRARY
string readLIBRARY( _LIBRARY &x) {
//    return Str("Record %-4u", recordNumber);
    return Str(
        "Library, module count: %u, start: block %u, byte 0x%04X",
        moduleCount,
        lclStartBlock,  
        lclStartByteNumber );
}
#endif
_LIBRARY library;