//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File:   lib51v2.1.2.bt
//   Authors:   Galen Tackett
//   Version:   2.1.2
//   Purpose:   Explore OMF51 library file format
//  Category:   Object File
// File Mask:   *.lib
//  ID Bytes:   2C 07
//   History:   V2.1.2   glt    Report on name lengths == or > 40, but process them anyway.
//              V2.1.1   glt    Added check for Keil-specific record variants,
//                              with messages when such occur.
//              V2.1
//              V2.0     glt     Re-created some earlier V2 fixes that were subsequently
//                              "bugged" by hasty "improvements", and tidying up a bit.
//
//              V2       glt     A damaged, "bugged" and nonworking version (see above)
//------------------------------------------------
#include <OMF51.h>
#include <UtilityFunctions.bt>

#define USE_READLIBRARY
local int test;
local string KeilString = " (Keil)";


string recordTypeName(RECORDTYPE rt)
{
    local string baseTypeString;
    local RECORDTYPE baseRecordType = thisRecordType & 0xfe; 
    switch( baseRecordType ) {
            case rt_Content:
                baseTypeString = "rt_Content";
                break;
    
            case rt_Fixup:
                baseTypeString = "rt_Fixup";
                break;
    
            case rt_Scope_DEF:
                baseTypeString = "rt_Scope_DEF";
                break;
    
            case rt_Public_DEF:
                baseTypeString = "rt_Public_DEF";
                break;
    
            case rt_External_DEF:
                baseTypeString = "rt_External_DEF";
                break;
    
            case rt_LIB_ModLocs:
                baseTypeString = "rt_LIB_ModLocs";
                break;
    
            case rt_LIB_ModName:
                baseTypeString = "rt_LIB_ModName";
                break;
            case rt_LIB_DICTNRY:
                baseTypeString = "rt_LIB_DICTNRY";
                break;
            default:
                Printf("Unexpected \"not implemented\" record type 0x%02X at %u.", thisRecordType, recordNumber);
    }
    return Str("%s%s", baseTypeString, ((baseRecordType == thisRecordType)) ? "" : KeilString);
}

typedef ubyte UHBYTE <format=hex>;
typedef uint16 UHWORD <format=hex>;

local RECORDTYPE    thisRecordType = 0;
local UHBYTE        thisChecksumResult;

local ushort    thisRecordLength;
local byte      abortFlag               = false;
local UHBYTE    checksumResult;
local uint       recordNumber, moduleCount, lclStartBlock, lclStartByteNumber;
local string    optionalRecordDesc = "";
local string    mismatchString; 

typedef UHWORD LIBBLKNUM <format=hex>;
typedef UHWORD LIBBYTENUM <format=hex>;


typedef struct {
    string  mdName;
    ubyte   mdIsOpen;
    LIBBLKNUM mdStartBlock;
    LIBBYTENUM  mdStartByte;
    uint        mdStartRecord, mdEndRecord;
    ubyte       mdTrnId <format=hex>;
} LCLMODULE;

local LCLMODULE lclModuleTable[10000], nullModule;

local uint      moduleDepth = 0;
local string    modules;
local int32     moduleTableIndex = -1;
local uint      lclIndex;
local ushort    lclLibModuleCount;

#ifndef NO_KEIL
local uint keilFlag;
local RECORDTYPE baseRecordType;
#endif

typedef struct {
    BitfieldDisablePadding();
    ushort moduleCount;
    LIBBLKNUM startBlock;
    LIBBYTENUM LIBBYTENUM;
    BitfieldEnablePadding();
    lclLibModuleCount = moduleCount;
} LIBHEADER <read=_LIBHEADERdesc>;

string _LIBHEADERdesc( LIBHEADER& lh) {
    return Str("Start of library, %u modul
int checkNameLength(ubyte n, int64 start)
{
    local int good =  (n > 0 && n <= maxExpectedNameLength) ? true : false;
    local string message = (n == 0) 
                    ? "Zero length name"
                    : (n > maxExpectedNameLength)
                        ? Str( "Name length (%u) exceeds maximum expected (%u)", n, maxExpectedNameLength)
                        : "";
    myAssert( good, message + Str(" at record %u, file offset 0x%X", recordNumber, start ) );
    return good;
}

typedef struct {
    //Printf("Record %u, Struct MODULEHEADER: %u\n", recordNumber, test++);
    BitfieldDisablePadding();
    ubyte   nameLength;
    char name[nameLength];
    //else {
    //    Printf("Zero length module name in module header at record %u (file offset 0x%x)\n", recordNumber, startof(this));
    //}
    TRNID   trnId;
    UHBYTE    pad :8;
    lclModuleTable[++moduleTableIndex].mdName = name;
    lclModuleTable[moduleTableIndex].mdIsOpen = true;
    lclModuleTable[moduleTableIndex].mdStartRecord = recordNumber;
    lclModuleTable[moduleTableIndex].mdTrnId = trnId;
    BitfieldEnablePadding();
} MODULEHEADER <read=ReadMODULEHEADER>;

string ReadMODULEHEADER( MODULEHEADER &x )
{
    local int good = checkNameLength( x.nameLength, startof(x.nameLength) );
    return Str( "Name=\"%s\", TRN_ID=0x%2X", (good ? x.name : "<null>"), x.trnId);
}

typedef struct {
    BitfieldDisablePadding();
    ubyte   nameLength;
    char name[nameLength];
        
    uint    pad:16;
    UHBYTE  regMsk;
    uint  pad2  :8;
    lclModuleTable[moduleTableIndex].mdIsOpen = false;
    BitfieldEnablePadding();
} MODULEENDdata <read=ReadMODULEENDdata>;

string ReadMODULEENDdata( MODULEENDdata &x )
{
    local int goodNameLen = checkNameLength( x.nameLength, startof(x.nameLength) );

    local string mismatchString = (0 != Strcmp(x.name, lclModuleTable[moduleTableIndex].mdName ))
                        ? "" 
                        : Str( " (%s != %s) ", x.name, lclModuleTable[moduleTableIndex].mdName);
    checkNameLength(x.nameLength, startof(x.nameLength));
    myAssert(mismatchString == "", mismatchString);
    if (x.nameLength > 0)
        return Str("Name=\"%s\"%s, Region mask 0x%02X", x.name, mismatchString, x.regMsk);
    else
        return Str("MODULEEND record has zero-length name at %X", FTell());
}

typedef struct {
    UHBYTE  data[parentof(this).recLength - 1];
} SEGMENTDEFdata <read=ReadSEGMENTDEFdata>;

string ReadSEGMENTDEFdata( SEGMENTDEFdata &x)
{
    return Str("Segment records are not parsed yet. Record length %u bytes.", thisRecordLength);
}

typedef struct {
    ubyte   defType;
    UHBYTE  data[parentof(this).recLength - sizeof(defType) - 1];
} DEBUGITEMSdata <read=ReadDEBUGITEMSdata>;

string ReadDEBUGITEMSdata( DEBUGITEMSdata &x)
{
    return Str("Debug items, length %u bytes, Def type 0x%02X",  thisRecordLength, x.defType);
}

typedef struct {
    UHBYTE  data[recLength - 1];
} NOTIMPLEMENTEDdata <read=ReadNOTIMPLEMENTEDdata>;

string ReadNOTIMPLEMENTEDdata( NOTIMPLEMENTEDdata &x)
{
    //optionalRecordDesc = Str("Unimplemented record type 0x%02X, length %u bytes", thisRecordType, thisRecordLength);
    //Printf(optionalRecordDesc+"\n");
    //myAssert(1==0, optionalRecordDesc);
    local string typeName;
#ifndef NO_KEIL
    return Str("Unimplemented %srecord type 0x%02X (\"%s\"), length %u bytes",
                keilFlag ? "Keil " : "",
                thisRecordType,
                recordTypeName(baseRecordType), thisRecordLength);
#else
    return Str("Unimplemented record type 0x%02X (\"%s\"), length %u bytes", thisRecordType, recordTypeName(thisRecordType), thisRecordLength);
#endif
}
  
typedef struct {
    StatusMessage("");
    if (recLength > 1)
        UHBYTE  data[recLength - 1];
} UNDOCRECORDdata <read=ReadUNDOCRECORDdata>;

string ReadUNDOCRECORDdata( UNDOCRECORDdata &x)
{
    //optionalRecordDesc = Str("Undocumented record type 0x%02X, length %u bytes", pthisRecordType, thisRecordLength);
    //Printf(optionalRecordDesc+"\n");
    //myAssert(1==0, optionalRecordDesc);
    return Str("Undocumented record type %02X, %u bytes", thisRecordType, thisRecordLength); // Str("Undocumented record type 0x%02X, length %u bytes",thisRecordType, thisRecordLength);
}

//
// 
typedef struct LIBRARY {
    local uint lclLibModuleCount;
    for (recordNumber = 1; !FEof() && !abortFlag; recordNumber++) {
        RECORDTYPE  recType <format=hex>;
        thisRecordType  = baseRecordType = recType;
        keilFlag        = recType & 1;
        baseRecordType &= 0xfe;
        ushort      recLength;
        myAssert( recLength > 0, Str("Zero-length record type 0x%02X at file offset %u (0x%X)", recType, FTell(), FTell() ) );
        thisRecordLength = recLength;
        // struct recordData {
            switch(thisRecordType & 0xfe) {
                case rt_LIB_Header:
                    myAssert(startof(recType) == 0, Str("Record %u, library header at offset 0x%04X instead of 0", recordNumber, startof(recType)) );
                    LIBHEADER libhdr;
                    lclStartBlock = libhdr.startBlock;
                    lclStartByteNumber = libhdr.LIBBYTENUM;
                    break;
        
                case rt_Module_HDR:
                    //++lclLibModuleCount;;
                    if (++moduleDepth > 1)
                        warningWithDelay(
                            Str(15, "Nested modules are not supported, at record %u. Continuing anyway",
                            recordNumber) );
                    MODULEHEADER modhdr;
                    moduleDepth--;
                    break;
        
                case rt_Module_END:
                    MODULEENDdata modend;
                    break;
    
                case rt_Segment_DEF:
                    Printf("Segment Definitions are only partially implemented, at record %u\n", recordNumber);
                    SEGMENTDEFdata segdef;
                    break;
     
                case rt_Debug_Item:
                    Printf("Debug Items are only partially implemented, at record %u\n", recordNumber);
                    DEBUGITEMSdata dbgitems;
                    break;
    
                case rt_Content:
                case rt_Fixup:
                case rt_Scope_DEF:
                case rt_Public_DEF:
                case rt_External_DEF:
                case rt_LIB_ModLocs:
                case rt_LIB_ModName:
                case rt_LIB_DICTNRY:
#ifndef NO_KEIL
                case rt_Content_Keil:
                case rt_Fixup_Keil:
                case rt_Segment_DEF:
                case rt_Segment_DEF_Keil:
                case rt_Public_DEF_keil:
                case rt_External_DEF_keil:

                if (!keilFlag) {
#endif

                    Printf("Not yet implemented record type 0x%02x (\"%s\"), at record %u\n", thisRecordType, recordTypeName(thisRecordType), recordNumber);
#ifndef NO_KEIL
                } else {
                    Printf("Undocumented, not yet implemented Keil type 0x%02x (\"%s\"), at record %u\n", thisRecordType, recordTypeName(thisRecordType), recordNumber);
                }
#endif
                    NOTIMPLEMENTEDdata notimpl;
                    break;
        
                default:
                    UNDOCRECORDdata nodoc;
                    Printf("Undocumented record type 0x%02x, at record %u\n", thisRecordType, recordNumber);
                    //abortFlag = true;
                    break;       
            } // end switch
#ifdef PRE_PAD_ADJUST // This appears to be an unnecessary precaution
#define ADJUST 1
            if ( sizeof(x) < (recLength-ADJUST) )
            {
    
                Printf("Extra %u bytes of data at end of record\n", (recLength - ADJUST) - sizeof(x));
                UHBYTE extraData[(recLength -ADJUST) - sizeof(x)];
            }
#endif
            //local uint64 checksumStartAt = startof(recType);
            UHBYTE  recordCheckSum;
            checksumResult = Checksum(CHECKSUM_BYTE, startof(recType), recLength + sizeof(recLength) + sizeof(recType));
            myAssert(checksumResult == 0, Str("Invalid checksum %02x in record %u, from file offset 0x%02X, %u (%02X) bytes", checksumResult, recordNumber, startof(recType), recLength, recLength));
            if ( optionalRecordDesc != "" )
            {
                Printf(optionalRecordDesc + "\n");
                optionalRecordDesc = "";
            }
        // } // end struct
    } // end for
    for (lclIndex = 0; lclIndex < lclLibModuleCount; lclIndex++)
        Printf("Module %u, name %s\n", lclIndex, lclModuleTable[lclIndex].mdName);
} _LIBRARY 
#ifdef USE_READLIBRARY
<read=readLIBRARY>
#endif
;

#ifdef USE_READLIBRARY
string readLIBRARY( _LIBRARY &x) {
//    return Str("Record %-4u", recordNumber);
    return Str(
        "OMF51 library, %u module%s, module names record location: block 0x%02X, byte 0x%04X",
        x.libhdr.moduleCount, (x.libhdr.moduleCount == 1) ? "" : "s",
        x.libhdr.startBlock,  
        x.libhdr.LIBBYTENUM );
}
#endif
_LIBRARY library;