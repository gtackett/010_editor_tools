//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: lib51.bt
//   Authors: Galen Tackett
//   Version: 2.0
//   Purpose: Explore OMF51 library file format
//  Category: Object File
// File Mask: *.lib
//  ID Bytes: 2C 07
//   History:  V2.0     glt     Re-created some earlier V2 fixes that were subsequently
//                              "bugged" by hasty "improvements", and tidying up a bit.
//
//             V2       glt     A damaged, "bugged" and nonworking version (see above)
//------------------------------------------------
#include <OMF51.h>


typedef ubyte UHBYTE <format=hex>;

local RECORDTYPE    thisRecordType = 0;
local UHBYTE        thisChecksumResult;

local ushort    thisRecordLength;
local byte      abortFlag               = false;
local UHBYTE    checksumResult;
local int       recordNumber;
local string    optionalRecordDesc = "";

local byte      inModule = false;

typedef struct {
    StatusMessage("");
    BitfieldDisablePadding();
    ushort lhModuleCount;
    ushort lhStartBlock <format=hex>;
    ushort lhByteNumber <format=hex>;
    BitfieldEnablePadding();
} LIBHEADERdata <read=ReadLIBHEADERdata>;

string ReadLIBHEADERdata( LIBHEADERdata &x)
{
    Printf("*** At LIBHEADER, sizeof:%u length: %u ***\n", sizeof(x), thisRecordLength);
    //Printf("%u %u\n", x.lhStartBlock, x.lhByteNumber);
    //if (x.lhStartBlock | x.lhByteNumber) 
    //    return Str("Library module count: %u. Module start: block %u, byte %u", x.lhModuleCount, x.lhStartBlock, x.lhByteNumber);
    return "Libheader";
}


typedef struct {
    BitfieldDisablePadding();
    ubyte   nameLength;
    if (nameLength > 0)
    {
        char name[nameLength];
    }
    else {
        Printf("Zero length module name in module header at record %u (file offset 0x%x)\n", startof(this));
    }
    TRNID   trnId;
    UHBYTE    pad :8;
    BitfieldEnablePadding();
} MODULEHEADERdata <read=ReadMODULEHEADERdata>;

string ReadMODULEHEADERdata( MODULEHEADERdata &x )
{
    return Str("Module Header %s, TRN_ID 0x%2X", x.name, x.trnId);
}

typedef struct {
    UHBYTE  data[parentof(this).recLength - 1];
} SEGMENTDEFdata <read=ReadSEGMENTDEFdata>;

string ReadSEGMENTDEFdata( SEGMENTDEFdata &x)
{
    return Str("Segment records are not parsed yet. Record length %u bytes", thisRecordLength);
}

typedef struct {
    BitfieldDisablePadding();
    ubyte   nameLength;
    if (nameLength > 0)
    {
        char name[nameLength];
    }
    uint    pad:16;
    UHBYTE  regMsk;
    uint  pad2  :8;
    BitfieldEnablePadding();
} MODULEENDdata <read=ReadMODULEENDdata>;

string ReadMODULEENDdata( MODULEENDdata &x )
{
    if (x.nameLength > 0)
        return Str("Module End %s, Region mask 0x%02X", x.name, 0 /* x.regMsk*/);
    else
        return Str("Module End has zero-length name at %X", FTell());
}

typedef struct {
    ubyte   defType;
    UHBYTE  data[parentof(this).recLength - sizeof(defType) - 1];
} DEBUGITEMSdata <read=ReadDEBUGITEMSdata>;

string ReadDEBUGITEMSdata( DEBUGITEMSdata &x)
{
    return Str("Debug items, length %u bytes, Def type 0x%02X",  thisRecordLength, x.defType);
}

typedef struct {
    UHBYTE  data[recLength - 1];
} NOTIMPLEMENTEDdata <read=ReadNOTIMPLEMENTEDdata>;

string ReadNOTIMPLEMENTEDdata( NOTIMPLEMENTEDdata &x)
{
    //optionalRecordDesc = Str("Unimplemented record type 0x%02X, length %u bytes", thisRecordType, thisRecordLength);
    //Printf(optionalRecordDesc+"\n");
    //Assert(1==0, optionalRecordDesc);
    return Str("Unimplemented record type 0x%02X, length %u bytes", thisRecordType, thisRecordLength);
}
  
typedef struct {
    StatusMessage("");
    if (recLength > 1)
        UHBYTE  data[recLength - 1];
    if (Strlen(optionalRecordDesc) > 0)
        Warning(optionalRecordDesc);
} UNDOCRECORDdata <read=ReadUNDOCRECORDdata>;

string ReadUNDOCRECORDdata( UNDOCRECORDdata &x)
{
    //optionalRecordDesc = Str("Undocumented record type 0x%02X, length %u bytes", pthisRecordType, thisRecordLength);
    //Printf(optionalRecordDesc+"\n");
   // Assert(1==0, optionalRecordDesc);
    return Str("Undocumented record type %02X, %u bytes", thisRecordType, thisRecordLength); // Str("Undocumented record type 0x%02X, length %u bytes",thisRecordType, thisRecordLength);
}
  

typedef struct LIBRARY {
    for (recordNumber = 1; !FEof() && !abortFlag; recordNumber++) {
        RECORDTYPE  recType <format=hex>;
        ushort      recLength;
        Assert( recLength > 0, Str("Zero-length record type 0x%02X at file offset %u (0x%X)", recType, FTell(), FTell() ) );
        thisRecordLength = recLength;
        //struct {
            switch(thisRecordType = recType) {
                case rt_LIB_Header:
                    LIBHEADERdata x /*lheaderData*/;
                    break;
        
                case rt_Module_HDR:
                    MODULEHEADERdata x /* mheader */;
                    if (inModuleHeader)
                        Warning("Nested modules are not supported, at record %u", recordNu
                    inModuleHeader = false;
                    break;
        
                case rt_Module_END:
                    MODULEENDdata x /* mend */;
                    break;
    
                case rt_Segment_DEF:
                    //Printf("Segment Definitions are only partially implemented, at record %u\n", recordNumber);
                    SEGMENTDEFdata x;
                    break;
     
                case rt_Debug_Item:
                    // Printf("Debug record\n");
                    //Printf("Debug Items are only partially implemented, at record %u\n", recordNumber);
                    DEBUGITEMSdata x /* debugItems */;
                    break;
    
                case rt_Content:
                case rt_Fixup:
                case rt_Scope_DEF:
                case rt_Public_DEF:
                case rt_External_DEF:
                case rt_LIB_ModLocs:
                case rt_LIB_ModName:
                case rt_LIB_DICTNRY:
                    //Printf("Unimplemented record type %02x, at record %u\n", recType, recordNumber);
                    NOTIMPLEMENTEDdata x /* UNDOC */;
                    break;
        
                default:
                    UNDOCRECORDdata x /* UNDOC */;
                    //Printf("Undocumented record type %02x, at record %u\n", recType, recordNumber);
                    //abortFlag = true;
                    break;       
            }
#ifdef PRE_PAD_ADJUST
#define ADJUST 1
            if ( sizeof(x) < (recLength-ADJUST) )
            {
    
                Printf("Extra %u bytes of data at end of record\n", (recLength - ADJUST) - sizeof(x));
                UHBYTE extraData[(recLength -ADJUST) - sizeof(x)];
            }
#endif
            //local uint64 checksumStartAt = startof(recType);
            UHBYTE  recordCheckSum;
            checksumResult = Checksum(CHECKSUM_BYTE, startof(recType), recLength + sizeof(recLength) + sizeof(recType));
            Assert(checksumResult == 0, Str("Invalid checksum %02x in record %u, from file offset 0x%02X, %u (%02X) bytes", checksumResult, recordNumber, startof(recType), recLength, recLength));
            if ( optionalRecordDesc != "" )
            {
                Printf(optionalRecordDesc + "\n");
                optionalRecordDesc = "";
            }
        }
    //} recordData;
} _LIBRARY /* <read=readLIBRARY> */;

//string readLIBRARY( _LIBRARY &x) {
//    return Str("Record %-4u", recordNumber);
//}

_LIBRARY library;